{
  "name": "grunt-frontend",
  "description": "CSS and JS minifier that respects source modification",
  "version": "2.0.4",
  "homepage": "https://github.com/sergeche/grunt-frontend",
  "author": {
    "name": "Sergey Chikuyonok",
    "email": "serge.che@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sergeche/grunt-frontend.git"
  },
  "bugs": {
    "url": "https://github.com/sergeche/grunt-frontend/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sergeche/grunt-frontend/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "dependencies": {
    "underscore": "~1.4.0",
    "rework": "~0.18.1",
    "uglify-js": "~2.4.0",
    "csso": "~1.3.9"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4",
    "grunt-contrib-jshint": "~0.3.0",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "keywords": [
    "gruntplugin",
    "frontend",
    "front-end",
    "css",
    "js"
  ],
  "readme": "A [Grunt.js](http://gruntjs.com) task that compiles CSS and JS files with respect of _file modification_ date. For JS, it uses built-in [UglifyJS](https://github.com/mishoo/UglifyJS) minifier, for CSS — Yandex’s [CSSO](https://github.com/css/csso) with automatic `@import` inlining and `url()` rewriting.\n\nUnlike basic minifiers, this task generates a hidden catalog file (`.build-catalog.json`) that stores state, last compilation date and checksum of minified files. Every time you call `frontend-*` task, it will look into this catalog and check if the state of files being minified was changed. If not, the file _will not_ be re-minified which saves CPU time and _modification date_. This date (or checksum hash) can be used to modify URLs to minified files for effective caching.\n\n## Usage ##\n\nThis plugin provides `frontend-js`, `frontend-css` and `frontend-index` multi-tasks. Global config can be defined in `frontend` key. All tasks are [file-based](http://gruntjs.com/configuring-tasks#files). Here’s example `Gruntfile.js`:\n\n```js\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n    \t// Global config for each frontend-* task. These values can\n    \t// be overridden in `options` key of each task\n    \tfrontent: {\n    \t\t// Force file minification even if they were not modified\n           force: false,\n        \n           // Path to project sources root folder.\n           // It is used to resolve absolute paths in CSS imports,\n           // for example: @import \"/css/file.css\" will be resolved \n           // to './src/files/css/file.css'\n           srcWebroot: './src/files',\n\n           // Destination root folder.\n           // Used to update minified files paths in catalog,\n           // e.g. instead of storing '/Users/foo/project/out/css/minified.css' path, \n           // task will cut-out path to webroot and store '/css/minified.css' instead\n           webroot: './out',\n           \n           // A scheme for creating versioned URLs. Versioned URLs\n           // can are stored in catalog and used to rewrite paths \n           // for `url()` values of CSS.\n           // Can be a string or a function.\n           // A string is a template with the following placeholders:\n           // * version: version tag (in most cases it’s CRC32 of file)\n           // * url: absolute URL, e.g. `/path/to/file.css`\n           // * dirname: absolute path to file’s directory, e.g. `/path/to/`\n           // * basename: file’s full name, e.g. `file.css`\n           // * filename: name of file, e.g. `file`\n           // * ext: file’s extension, e.g. `css`\n           rewriteScheme: '/-/<%= version %><%= url %>',\n           \n           // function to post-process file’s content before it will be\n           // saved to disk\n           postProcess: function(content, fileInfo) {}\n    \t},\n    \t\n    \t// Task for concatenating and minifying JS files\n        'frontend-js': {\n            main: {\n                // task options\n                options: {\n                    // Minify JS\n                    minify: true,\n                    \n                    // config for UglifyJS\n                    uglify: {}\n                },\n                \n                files: {\n\t\t\t\t\t'out/js/f.js': [\n\t\t\t\t\t\t'test/js/file1.js',\n\t\t\t\t\t\t'test/js/file2.js'\n\t\t\t\t\t]\n\t\t\t\t}\n            }\n        },\n        \n        // Task for concatenating and minifying CSS files\n        'frontend-css': {\n        \tmain: {\n\t        \toptions: {\n\t        \t\t// inline @imports\n\t        \t\tinline: true,\n\t        \t\t\n\t        \t\t// rewrite all url() to versioned ones.\n\t        \t\t// the `rewriteScheme` is used to create versioned URL\n\t        \t\trewriteUrl: true,\n\t        \t\t\n\t        \t\t// minify CSS\n\t        \t\tminify: true\n\t        \t},\n\t        \tfiles: [\n\t\t\t\t\t{src: 'test/css/*.css', dest: 'out/css'}\n\t\t\t\t]\n        \t}\n        },\n        \n        // Task fo indexing files and storing its’ version hash\n        // and verioned URL in catalog. Useful for fast lookups of \n        // versioned files\n        'frontend-index': {\n        \tmain: {\n\t\t\t\tfiles: [{src: 'test/css/**/*.{css,jpg,png}'}]\n\t\t\t}\n        }\n    });\n};\n```\n\nThis task can be used together with [docpad-plugin-frontend](https://github.com/sergeche/docpad-plugin-frontend) to automatically generate cache-effective URLs to assets for [DocPad](https://github.com/bevry/docpad)-generated web-site.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-frontend@2.0.4",
  "_from": "grunt-frontend@~2.0.3"
}
